X_train = []
y_train = []
X_test = []
y_test = []
test_data = []
classes = ['airplane', 'baseball_field', 'basketball_court', 'beach', 'bridge', 'cemetery', 'chaparral', 'christmas_tree_farm', 'closed_road', 'coastal_mansion', 'crosswalk', 'dense_residential', 'ferry_terminal', 'football_field', 'forest', 'freeway', 'golf_course', 'harbor', 'intersection', 'mobile_home_park', 'nursing_home', 'oil_gas_field', 'oil_well', 'overpass', 'parking_lot', 'parking_space', 'railway', 'river', 'runway', 'runway_marking', 'shipping_yard', 'solar_panel', 'sparse_residential', 'storage_tank', 'swimming_pool', 'tennis_court', 'transformer_station', 'wastewater_treatment_plant']

def create_train_test_data():
    for categories in classes:
        path = os.path.join(data, categories)
        i = 0
        for img in os.listdir(path):
            if(i<=200):
                try:
                    img_array = cv2.imread(os.path.join(path,img))
                    X_train.append(img_array)
                    y_train.append(categories)
                except Exception as e:
                    print(e)
                
            elif(i>200 and i<=250):
                 try:
                    img_array = cv2.imread(os.path.join(path,img))
                    X_test.append(img_array)
                    y_test.append(categories)
                 except Exception as e:
                    print(e)
                 
            else: 
                pass
            i+= 1
            
 create_train_test_data()
print(len(X_train))
print(len(y_train))
print(len(X_test))
print(len(y_test))


x_train = np.array(X_train)
x_train = x_train.reshape(-1,256, 256, 1) 
print(x_train.shape)

x_test = np.array(X_test)
x_test = x_test.reshape(-1,256, 256, 1) 
print(x_test.shape)


fig = plt.figure()
for i in range(9):
  plt.subplot(3,3,i+1)
  plt.tight_layout()
  print(X_train[i].shape)
  plt.imshow(X_train[i], cmap='gray', interpolation='none')
  plt.title("Iamge: {}".format(Y_train[i]))
  plt.xticks([])
  plt.yticks([])
print(fig)


num_classes = 38
y_train = []
y_test = []

class_dict = {k: v for v, k in enumerate(classes)}
# print(class_dict)

for value in Y_train:
    x = class_dict[value]
    y_train.append(keras.utils.to_categorical(x, num_classes))    

for value in Y_test:
    x = class_dict[value]
    y_test.append(keras.utils.to_categorical(x, num_classes)) 

print(len(y_train))
print(len(y_test))


batch_size = 400
num_classes = 38
epochs = 50

model = Sequential()
model.add(Conv2D(4, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=(256,256,1)))

model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(num_classes, activation='softmax'))


# model.summary()

model.compile(loss=keras.losses.categorical_crossentropy,
            optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

model.fit(x_train, np.array(y_train),
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data= (x_test, np.array(y_test)))
# score = model.evaluate(np.array(X_test), np.array(y_test), verbose=0)


score = model.evaluate(x_test, np.array(y_test), verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
